[{"/Users/resecsystems/Documents/javasprogs/src/index.js":"1","/Users/resecsystems/Documents/javasprogs/src/App.js":"2","/Users/resecsystems/Documents/javasprogs/src/reportWebVitals.js":"3","/Users/resecsystems/Documents/javasprogs/src/Test.jsx":"4","/Users/resecsystems/Documents/javasprogs/src/Components/ColorPicker.jsx":"5","/Users/resecsystems/Documents/javasprogs/src/Components/Canvas.jsx":"6"},{"size":535,"mtime":1694179556096,"results":"7","hashOfConfig":"8"},{"size":185,"mtime":1694714343936,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1694179556097,"results":"10","hashOfConfig":"8"},{"size":105,"mtime":1694187036267,"results":"11","hashOfConfig":"8"},{"size":358,"mtime":1694703599123,"results":"12","hashOfConfig":"8"},{"size":4848,"mtime":1694714365970,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"106bgm",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/resecsystems/Documents/javasprogs/src/index.js",[],[],[],"/Users/resecsystems/Documents/javasprogs/src/App.js",["35"],[],"import logo from './logo.svg';\nimport './App.css';\n\nimport Canvas from './Components/Canvas';\nfunction App() {\n  \n  \n  return (\n    <>\n   \n<Canvas/>\n    </>\n  );\n}\n\nexport default App;\n","/Users/resecsystems/Documents/javasprogs/src/reportWebVitals.js",[],[],"/Users/resecsystems/Documents/javasprogs/src/Test.jsx",[],[],"/Users/resecsystems/Documents/javasprogs/src/Components/ColorPicker.jsx",[],[],"/Users/resecsystems/Documents/javasprogs/src/Components/Canvas.jsx",["36","37","38"],[],"import React, { useRef, useState,useEffect } from 'react';\nimport\"./Compo.css\";\n\nfunction Canvas() {\n  const canvasRef = useRef(null);\n  const [image, setImage] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [points, setPoints] = useState([]);\n  const [fillColor, setFillColor] = useState('red');\n  const [shapes, setShapes] = useState([]);\n  const [selectedColor, setSelectedColor] = useState('#00bbff');\n  const [strokeColor, setStrokeColor] = useState('blue'); // Initial selected color\n  const[colorpickershow,setcolorpickershow]=useState(false);\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImage(e.target.result);\n        setcolorpickershow(true);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n \n  const handleMouseDown = (e) => {\n    setDrawing(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = 2;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    drawImage(image)\n    const { offsetX, offsetY } = e.nativeEvent;\n    ctx.moveTo(offsetX, offsetY);\n    setPoints([...points, { x: offsetX, y: offsetY }]);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!drawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const { offsetX, offsetY } = e.nativeEvent;\n    ctx.lineTo(offsetX, offsetY);\n    ctx.stroke();\n  \n    setPoints([...points, { x: offsetX, y: offsetY }]);\n   \n  };\n\n  const handleMouseUp = () => {\n    setDrawing(false);\n    const newShape = [...points];\n    setShapes([...shapes, newShape]);\n    setPoints([]);\n  };\n\n  const handleFillColorChange = (e) => {\n    setFillColor(e.target.value);\n    console.log(fillColor,\"color\")\n\n  };\n  const eraseCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage(image)\n    \n  };\n\n  const fillPolygon = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = fillColor;\n\n    shapes.forEach((shape) => {\n      ctx.beginPath();\n      shape.forEach((point, index) => {\n        if (index === 0) {\n          ctx.moveTo(point.x, point.y);\n        } else {\n          ctx.lineTo(point.x, point.y);\n        }\n      });\n      ctx.closePath();\n      ctx.fill();\n    });\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setPoints([]);\n    setShapes([]);\n  };\n\n  const drawImage = (imageUrl) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageUrl;\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    \n  };\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      setDrawing(false);\n      setPoints([]);\n    }\n  }, [image]);\n  return (\n    <div>\n    <section className='sectionmain'>\n    <h1 className='head'>Image Upload and Polygon Drawing</h1>\n\n\n   \n  \n\n      {/* Input field for image upload */}\n      <div>\n      <label class=\"file-input-container\">\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n      <span class=\"file-input-label\">Choose a File</span>\n      </label>\n      </div>\n      <div class=\"image-container\">\n      {/* Display the uploaded image */}\n      {image && (\n        <div className='mt-5'>\n          <h2>Uploaded Image:</h2>\n          <img src={image} alt=\"Uploaded\"  width={400}\n           />\n        </div>\n      )}\n    \n      {image && (\n        <div>\n          <h2>Draw a Polygon:</h2>\n          {colorpickershow ?      <div><input type=\"color\" value=\"blue\" onChange={handleFillColorChange} />\n       \n          <button onClick={fillPolygon} className=\"btn fillcolorbtn\">Fill</button>\n          <button onClick={clearCanvas} className=\" btn fillcolorbtn\">Clear</button>\n          <button onClick={eraseCanvas} className=\" btn fillcolorbtn\">Erase</button>\n          </div>:null} \n          <canvas\n          ref={canvasRef}\n            width={400}\n            height={600}\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n           \n          />\n  \n        </div>\n        \n      )\n    \n    }\n      </div>\n      </section>\n\n   \n    \n      <canvas\n        ref={canvasRef}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n      />\n    </div>\n  );\n}\n\nexport default Canvas;\n",{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":11,"column":10,"nodeType":"41","messageId":"42","endLine":11,"endColumn":23},{"ruleId":"39","severity":1,"message":"44","line":11,"column":25,"nodeType":"41","messageId":"42","endLine":11,"endColumn":41},{"ruleId":"39","severity":1,"message":"45","line":12,"column":23,"nodeType":"41","messageId":"42","endLine":12,"endColumn":37},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'selectedColor' is assigned a value but never used.","'setSelectedColor' is assigned a value but never used.","'setStrokeColor' is assigned a value but never used."]