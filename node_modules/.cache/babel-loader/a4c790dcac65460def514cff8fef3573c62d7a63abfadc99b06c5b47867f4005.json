{"ast":null,"code":"var _jsxFileName = \"/Users/resecsystems/Documents/javasprogs/src/Components/Fabric.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ColorPicker from './ColorPicker';\nimport \"./Compo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Fabric() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const [colorpickershow, setcolorpickershow] = useState(false);\n  const canvasRef = useRef(null);\n  const [selectedColor, setSelectedColor] = useState('#00bbff'); // Initial selected color\n  const [shapes, setShapes] = useState([]);\n  const [fillColor, setFillColor] = useState('red');\n  const handleFillColorChange = e => {\n    setFillColor(e.target.value);\n  };\n  const fillPolygon = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = fillColor;\n    shapes.forEach(shape => {\n      ctx.beginPath();\n      shape.forEach((point, index) => {\n        if (index === 0) {\n          ctx.moveTo(point.x, point.y);\n        } else {\n          ctx.lineTo(point.x, point.y);\n        }\n      });\n      ctx.closePath();\n      ctx.fill();\n    });\n  };\n  // Function to handle image upload\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setImage(e.target.result);\n        setcolorpickershow(true);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Function to handle polygon drawing\n  const handlePolygonDrawing = e => {\n    if (!drawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    setPolygonPoints([...polygonPoints, {\n      x,\n      y\n    }]);\n\n    // Draw the polygon on the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage(image);\n    drawPolygon(ctx, polygonPoints);\n  };\n\n  // Function to start drawing a polygon\n  const startDrawing = e => {\n    e.preventDefault();\n    setDrawing(true);\n    setPolygonPoints([]);\n  };\n\n  // Function to stop drawing a polygon\n  const stopDrawing = () => {\n    setDrawing(false);\n  };\n\n  // Function to draw an image on the canvas\n  const drawImage = imageUrl => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageUrl;\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    setSelectedColor(\"red\");\n  };\n\n  // Function to draw a polygon on the canvas\n  const drawPolygon = e => {\n    setDrawing(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.strokeStyle = fillColor;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    const {\n      offsetX,\n      offsetY\n    } = e.nativeEvent;\n    ctx.moveTo(offsetX, offsetY);\n    setPoints([...points, {\n      x: offsetX,\n      y: offsetY\n    }]);\n  };\n\n  // Clear canvas and reset drawing when the image changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      setDrawing(false);\n      setPolygonPoints([]);\n    }\n  }, [image]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"sectionmain\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Image Upload and Polygon Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          class: \"file-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"file-input-label\",\n            children: \"Choose a File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"image-container\",\n        children: [image && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Uploaded Image:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: \"Uploaded\",\n            width: 400,\n            height: 400\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Draw a Polygon:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            width: 400,\n            height: 400,\n            onMouseDown: startDrawing,\n            onMouseMove: handlePolygonDrawing,\n            onMouseUp: stopDrawing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fillPolygon,\n            children: \"Fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            value: fillColor,\n            onChange: handleFillColorChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this), colorpickershow ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"div\",\n          children: [\"   \", /*#__PURE__*/_jsxDEV(ColorPicker, {\n            selectedColor: selectedColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 24\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Fabric, \"2ONl327nddroINiK+M4o2+y+6Mo=\");\n_c = Fabric;\nexport default Fabric;\nvar _c;\n$RefreshReg$(_c, \"Fabric\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ColorPicker","jsxDEV","_jsxDEV","Fabric","_s","image","setImage","drawing","setDrawing","polygonPoints","setPolygonPoints","colorpickershow","setcolorpickershow","canvasRef","selectedColor","setSelectedColor","shapes","setShapes","fillColor","setFillColor","handleFillColorChange","e","target","value","fillPolygon","canvas","current","ctx","getContext","fillStyle","forEach","shape","beginPath","point","index","moveTo","x","y","lineTo","closePath","fill","handleImageUpload","event","file","files","reader","FileReader","onload","result","readAsDataURL","handlePolygonDrawing","rect","getBoundingClientRect","clientX","left","clientY","top","clearRect","width","height","drawImage","drawPolygon","startDrawing","preventDefault","stopDrawing","imageUrl","img","Image","src","strokeStyle","lineWidth","offsetX","offsetY","nativeEvent","setPoints","points","children","className","fileName","_jsxFileName","lineNumber","columnNumber","class","type","accept","onChange","alt","ref","onMouseDown","onMouseMove","onMouseUp","onClick","_c","$RefreshReg$"],"sources":["/Users/resecsystems/Documents/javasprogs/src/Components/Fabric.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ColorPicker from './ColorPicker';\nimport\"./Compo.css\";\nfunction Fabric() {\n  const [image, setImage] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [polygonPoints, setPolygonPoints] = useState([]);\nconst[colorpickershow,setcolorpickershow]=useState(false);\n  const canvasRef = useRef(null);\n\n  const [selectedColor, setSelectedColor] = useState('#00bbff');// Initial selected color\n  const [shapes, setShapes] = useState([]);\n  const [fillColor, setFillColor] = useState('red');\n  const handleFillColorChange = (e) => {\n    setFillColor(e.target.value);\n  };\n  const fillPolygon = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = fillColor;\n\n    shapes.forEach((shape) => {\n      ctx.beginPath();\n      shape.forEach((point, index) => {\n        if (index === 0) {\n          ctx.moveTo(point.x, point.y);\n        } else {\n          ctx.lineTo(point.x, point.y);\n        }\n      });\n      ctx.closePath();\n      ctx.fill();\n    });\n  };\n  // Function to handle image upload\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImage(e.target.result);\n        setcolorpickershow(true);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Function to handle polygon drawing\n  const handlePolygonDrawing = (e) => {\n    if (!drawing) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    setPolygonPoints([...polygonPoints, { x, y }]);\n\n    // Draw the polygon on the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage(image);\n    drawPolygon(ctx, polygonPoints);\n\n  };\n\n  // Function to start drawing a polygon\n  const startDrawing = (e) => {\n      e.preventDefault();\n    setDrawing(true);\n    setPolygonPoints([]);\n  };\n\n  // Function to stop drawing a polygon\n  const stopDrawing = () => {\n    setDrawing(false);\n  };\n\n  // Function to draw an image on the canvas\n  const drawImage = (imageUrl) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageUrl;\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    setSelectedColor(\"red\")\n  };\n\n  // Function to draw a polygon on the canvas\n  const drawPolygon = (e) => {\n    setDrawing(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.strokeStyle = fillColor;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    const { offsetX, offsetY } = e.nativeEvent;\n    ctx.moveTo(offsetX, offsetY);\n    setPoints([...points, { x: offsetX, y: offsetY }]);\n  };\n\n  // Clear canvas and reset drawing when the image changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      setDrawing(false);\n      setPolygonPoints([]);\n    }\n  }, [image]);\n\n  return (\n    <div>\n    <section className='sectionmain'>\n      <h1>Image Upload and Polygon Drawing</h1>\n\n      {/* Input field for image upload */}\n      <div>\n      <label class=\"file-input-container\">\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n      <span class=\"file-input-label\">Choose a File</span>\n      </label>\n      </div>\n      <div class=\"image-container\">\n      {/* Display the uploaded image */}\n      {image && (\n        <div>\n          <h2>Uploaded Image:</h2>\n          <img src={image} alt=\"Uploaded\"  width={400}\n          height={400} />\n        </div>\n      )}\n\n\n      {/* Canvas for drawing polygons */}\n     \n  \n      {image && (\n        <div>\n          <h2>Draw a Polygon:</h2>\n          <canvas\n          ref={canvasRef}\n            width={400}\n            height={400}\n            onMouseDown={startDrawing}\n            onMouseMove={handlePolygonDrawing}\n            onMouseUp={stopDrawing}\n           \n          />\n          <button onClick={fillPolygon}>Fill</button>\n          <input type=\"color\" value={fillColor} onChange={handleFillColorChange} />\n        </div>\n        \n      )}\n     {colorpickershow ?<div className='div'>   <ColorPicker selectedColor={selectedColor}  /></div>:null} \n    {/* ColorPicker component */}\n     \n      </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Fabric;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpB,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAK,CAACc,eAAe,EAACC,kBAAkB,CAAC,GAACf,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMgB,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,SAAS,CAAC,CAAC;EAC9D,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMuB,qBAAqB,GAAIC,CAAC,IAAK;IACnCF,YAAY,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EACD,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,SAAS,GAAGX,SAAS;IAEzBF,MAAM,CAACc,OAAO,CAAEC,KAAK,IAAK;MACxBJ,GAAG,CAACK,SAAS,CAAC,CAAC;MACfD,KAAK,CAACD,OAAO,CAAC,CAACG,KAAK,EAAEC,KAAK,KAAK;QAC9B,IAAIA,KAAK,KAAK,CAAC,EAAE;UACfP,GAAG,CAACQ,MAAM,CAACF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC;QAC9B,CAAC,MAAM;UACLV,GAAG,CAACW,MAAM,CAACL,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC;QAC9B;MACF,CAAC,CAAC;MACFV,GAAG,CAACY,SAAS,CAAC,CAAC;MACfZ,GAAG,CAACa,IAAI,CAAC,CAAC;IACZ,CAAC,CAAC;EACJ,CAAC;EACD;EACA,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAMC,IAAI,GAAGD,KAAK,CAACpB,MAAM,CAACsB,KAAK,CAAC,CAAC,CAAC;IAElC,IAAID,IAAI,EAAE;MACR,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAI1B,CAAC,IAAK;QACrBf,QAAQ,CAACe,CAAC,CAACC,MAAM,CAAC0B,MAAM,CAAC;QACzBpC,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC;MACDiC,MAAM,CAACI,aAAa,CAACN,IAAI,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMO,oBAAoB,GAAI7B,CAAC,IAAK;IAClC,IAAI,CAACd,OAAO,EAAE;IAEd,MAAMkB,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMuB,IAAI,GAAG1B,MAAM,CAAC2B,qBAAqB,CAAC,CAAC;IAC3C,MAAMhB,CAAC,GAAGf,CAAC,CAACgC,OAAO,GAAGF,IAAI,CAACG,IAAI;IAC/B,MAAMjB,CAAC,GAAGhB,CAAC,CAACkC,OAAO,GAAGJ,IAAI,CAACK,GAAG;IAE9B9C,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAE;MAAE2B,CAAC;MAAEC;IAAE,CAAC,CAAC,CAAC;;IAE9C;IACAV,GAAG,CAAC8B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEhC,MAAM,CAACiC,KAAK,EAAEjC,MAAM,CAACkC,MAAM,CAAC;IAChDC,SAAS,CAACvD,KAAK,CAAC;IAChBwD,WAAW,CAAClC,GAAG,EAAElB,aAAa,CAAC;EAEjC,CAAC;;EAED;EACA,MAAMqD,YAAY,GAAIzC,CAAC,IAAK;IACxBA,CAAC,CAAC0C,cAAc,CAAC,CAAC;IACpBvD,UAAU,CAAC,IAAI,CAAC;IAChBE,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;;EAED;EACA,MAAMsD,WAAW,GAAGA,CAAA,KAAM;IACxBxD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;;EAED;EACA,MAAMoD,SAAS,GAAIK,QAAQ,IAAK;IAC9B,MAAMxC,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMsC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACE,GAAG,GAAGH,QAAQ;IAClBtC,GAAG,CAACiC,SAAS,CAACM,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEzC,MAAM,CAACiC,KAAK,EAAEjC,MAAM,CAACkC,MAAM,CAAC;IACrD5C,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;;EAED;EACA,MAAM8C,WAAW,GAAIxC,CAAC,IAAK;IACzBb,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMiB,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAAC0C,WAAW,GAAGnD,SAAS;IAC3BS,GAAG,CAAC2C,SAAS,GAAG,CAAC;IACjB3C,GAAG,CAACK,SAAS,CAAC,CAAC;IACf,MAAM;MAAEuC,OAAO;MAAEC;IAAQ,CAAC,GAAGnD,CAAC,CAACoD,WAAW;IAC1C9C,GAAG,CAACQ,MAAM,CAACoC,OAAO,EAAEC,OAAO,CAAC;IAC5BE,SAAS,CAAC,CAAC,GAAGC,MAAM,EAAE;MAAEvC,CAAC,EAAEmC,OAAO;MAAElC,CAAC,EAAEmC;IAAQ,CAAC,CAAC,CAAC;EACpD,CAAC;;EAED;EACAzE,SAAS,CAAC,MAAM;IACd,IAAIc,SAAS,CAACa,OAAO,EAAE;MACrB,MAAMD,MAAM,GAAGZ,SAAS,CAACa,OAAO;MAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;MACnCD,GAAG,CAAC8B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEhC,MAAM,CAACiC,KAAK,EAAEjC,MAAM,CAACkC,MAAM,CAAC;MAChDnD,UAAU,CAAC,KAAK,CAAC;MACjBE,gBAAgB,CAAC,EAAE,CAAC;IACtB;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,oBACEH,OAAA;IAAA0E,QAAA,eACA1E,OAAA;MAAS2E,SAAS,EAAC,aAAa;MAAAD,QAAA,gBAC9B1E,OAAA;QAAA0E,QAAA,EAAI;MAAgC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGzC/E,OAAA;QAAA0E,QAAA,eACA1E,OAAA;UAAOgF,KAAK,EAAC,sBAAsB;UAAAN,QAAA,gBACnC1E,OAAA;YAAOiF,IAAI,EAAC,MAAM;YAACC,MAAM,EAAC,SAAS;YAACC,QAAQ,EAAE5C;UAAkB;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACnE/E,OAAA;YAAMgF,KAAK,EAAC,kBAAkB;YAAAN,QAAA,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN/E,OAAA;QAAKgF,KAAK,EAAC,iBAAiB;QAAAN,QAAA,GAE3BvE,KAAK,iBACJH,OAAA;UAAA0E,QAAA,gBACE1E,OAAA;YAAA0E,QAAA,EAAI;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxB/E,OAAA;YAAKkE,GAAG,EAAE/D,KAAM;YAACiF,GAAG,EAAC,UAAU;YAAE5B,KAAK,EAAE,GAAI;YAC5CC,MAAM,EAAE;UAAI;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CACN,EAMA5E,KAAK,iBACJH,OAAA;UAAA0E,QAAA,gBACE1E,OAAA;YAAA0E,QAAA,EAAI;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxB/E,OAAA;YACAqF,GAAG,EAAE1E,SAAU;YACb6C,KAAK,EAAE,GAAI;YACXC,MAAM,EAAE,GAAI;YACZ6B,WAAW,EAAE1B,YAAa;YAC1B2B,WAAW,EAAEvC,oBAAqB;YAClCwC,SAAS,EAAE1B;UAAY;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAExB,CAAC,eACF/E,OAAA;YAAQyF,OAAO,EAAEnE,WAAY;YAAAoD,QAAA,EAAC;UAAI;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC3C/E,OAAA;YAAOiF,IAAI,EAAC,OAAO;YAAC5D,KAAK,EAAEL,SAAU;YAACmE,QAAQ,EAAEjE;UAAsB;YAAA0D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtE,CAEN,EACDtE,eAAe,gBAAET,OAAA;UAAK2E,SAAS,EAAC,KAAK;UAAAD,QAAA,GAAC,KAAG,eAAA1E,OAAA,CAACF,WAAW;YAACc,aAAa,EAAEA;UAAc;YAAAgE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,GAAC,IAAI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAG7F,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAAC7E,EAAA,CAhKQD,MAAM;AAAAyF,EAAA,GAANzF,MAAM;AAkKf,eAAeA,MAAM;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}