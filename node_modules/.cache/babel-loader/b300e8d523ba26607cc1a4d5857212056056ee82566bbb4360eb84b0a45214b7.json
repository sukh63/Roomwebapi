{"ast":null,"code":"var _jsxFileName = \"/Users/resecsystems/Documents/javasprogs/src/Components/Canvas.jsx\",\n  _s = $RefreshSig$();\n// Canvas.js\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas() {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [points, setPoints] = useState([]);\n  const [selectedColor, setSelectedColor] = useState('red');\n  const handleMouseDown = e => {\n    setIsDrawing(true);\n    const {\n      offsetX,\n      offsetY\n    } = e.nativeEvent;\n    setPoints([...points, {\n      x: offsetX,\n      y: offsetY\n    }]);\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing) return;\n    const {\n      offsetX,\n      offsetY\n    } = e.nativeEvent;\n    setPoints([...points, {\n      x: offsetX,\n      y: offsetY\n    }]);\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n  };\n  const handleColorChange = e => {\n    setSelectedColor(e.target.value);\n  };\n  const clearCanvas = () => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    setPoints([]);\n  };\n  const fillPolygon = () => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.fillStyle = selectedColor;\n    ctx.beginPath();\n    points.forEach((point, index) => {\n      if (index === 0) {\n        ctx.moveTo(point.x, point.y);\n      } else {\n        ctx.lineTo(point.x, point.y);\n      }\n    });\n    ctx.closePath();\n    ctx.fill();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: selectedColor,\n        onChange: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fillPolygon,\n        children: \"Fill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"Jeu5GNCCScu2E1JSeDG0+Y4AEHI=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Canvas","_s","canvasRef","isDrawing","setIsDrawing","points","setPoints","selectedColor","setSelectedColor","handleMouseDown","e","offsetX","offsetY","nativeEvent","x","y","handleMouseMove","handleMouseUp","handleColorChange","target","value","clearCanvas","ctx","current","getContext","clearRect","canvas","width","height","fillPolygon","fillStyle","beginPath","forEach","point","index","moveTo","lineTo","closePath","fill","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","onMouseDown","onMouseMove","onMouseUp","_c","$RefreshReg$"],"sources":["/Users/resecsystems/Documents/javasprogs/src/Components/Canvas.jsx"],"sourcesContent":["// Canvas.js\nimport React, { useRef, useState } from 'react';\n\nfunction Canvas() {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [points, setPoints] = useState([]);\n  const [selectedColor, setSelectedColor] = useState('red');\n\n  const handleMouseDown = (e) => {\n    setIsDrawing(true);\n    const { offsetX, offsetY } = e.nativeEvent;\n    setPoints([...points, { x: offsetX, y: offsetY }]);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isDrawing) return;\n    const { offsetX, offsetY } = e.nativeEvent;\n    setPoints([...points, { x: offsetX, y: offsetY }]);\n  };\n\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n  };\n\n  const handleColorChange = (e) => {\n    setSelectedColor(e.target.value);\n  };\n\n  const clearCanvas = () => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    setPoints([]);\n  };\n\n  const fillPolygon = () => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.fillStyle = selectedColor;\n    ctx.beginPath();\n    points.forEach((point, index) => {\n      if (index === 0) {\n        ctx.moveTo(point.x, point.y);\n      } else {\n        ctx.lineTo(point.x, point.y);\n      }\n    });\n    ctx.closePath();\n    ctx.fill();\n  };\n\n  return (\n    <div>\n      <div>\n        <input type=\"color\" value={selectedColor} onChange={handleColorChange} />\n        <button onClick={fillPolygon}>Fill</button>\n        <button onClick={clearCanvas}>Clear</button>\n      </div>\n      <canvas\n        ref={canvasRef}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n      />\n    </div>\n  );\n}\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}