{"ast":null,"code":"var _jsxFileName = \"/Users/resecsystems/Documents/javasprogs/src/Components/Room.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./Compo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Room = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [drawing, setDrawing] = useState(false);\n  const [currentImage, setCurrentImage] = useState(null);\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const canvasRef = /*#__PURE__*/React.createRef();\n\n  // Function to handle image upload\n  const handleImageUpload = event => {\n    const files = event.target.files;\n    if (files) {\n      const imageArray = Array.from(files).map(file => URL.createObjectURL(file));\n      setImages([...images, ...imageArray]);\n    }\n  };\n  // Function to select an image for drawing polygons\n  const selectImage = imageUrl => {\n    setCurrentImage(imageUrl);\n    setPolygonPoints([]);\n  };\n\n  // Function to handle polygon drawing\n  const handlePolygonDrawing = e => {\n    if (!drawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    setPolygonPoints([...polygonPoints, {\n      x,\n      y\n    }]);\n    // Draw the polygon on the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage(currentImage);\n    drawPolygon(ctx, polygonPoints);\n  };\n\n  // Function to start drawing a polygon\n  const startDrawing = () => {\n    setDrawing(true);\n    setPolygonPoints([]);\n  };\n\n  // Function to stop drawing a polygon\n  const stopDrawing = () => {\n    setDrawing(false);\n  };\n\n  // Function to draw an image on the canvas\n  const drawImage = imageUrl => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageUrl;\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  };\n\n  // Function to draw a polygon on the canvas\n  const drawPolygon = (ctx, points) => {\n    if (points.length < 2) return;\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 2;\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n    ctx.closePath();\n    ctx.stroke();\n  };\n\n  // Function to handle image upload\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"sectionmain\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"head\",\n          children: \"Image Upload and Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          class: \"file-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"file-input-label\",\n            children: \"Upload Photo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 6\n        }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Uploaded Images:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-list\",\n            children: images.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-container\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imageUrl,\n                alt: `Uploaded ${index}`,\n                width: \"200\",\n                onClick: () => selectImage(imageUrl)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 13\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 11\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 7\n          }, this), currentImage && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Draw a Polygon:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n              ref: canvasRef,\n              width: 800,\n              height: 400,\n              onMouseDown: startDrawing,\n              onMouseMove: handlePolygonDrawing,\n              onMouseUp: stopDrawing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"ao0BpgiHtD8652JtxLLeBfvA8iM=\");\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Room","_s","images","setImages","drawing","setDrawing","currentImage","setCurrentImage","polygonPoints","setPolygonPoints","canvasRef","createRef","handleImageUpload","event","files","target","imageArray","Array","from","map","file","URL","createObjectURL","selectImage","imageUrl","handlePolygonDrawing","e","canvas","current","ctx","getContext","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","clearRect","width","height","drawImage","drawPolygon","startDrawing","stopDrawing","img","Image","src","points","length","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","i","lineTo","closePath","stroke","children","className","fileName","_jsxFileName","lineNumber","columnNumber","class","type","accept","onChange","index","alt","onClick","ref","onMouseDown","onMouseMove","onMouseUp","_c","$RefreshReg$"],"sources":["/Users/resecsystems/Documents/javasprogs/src/Components/Room.jsx"],"sourcesContent":["import React,{useState} from 'react'\nimport \"./Compo.css\";\n\nconst Room = () => {\n    const [images, setImages] = useState([]);\n    const [drawing, setDrawing] = useState(false);\n    const [currentImage, setCurrentImage] = useState(null);\n    const [polygonPoints, setPolygonPoints] = useState([]);\n    const canvasRef = React.createRef();\n  \n    // Function to handle image upload\n    const handleImageUpload = (event) => {\n      const files = event.target.files;\n  \n      if (files) {\n        const imageArray = Array.from(files).map((file) => URL.createObjectURL(file));\n        setImages([...images, ...imageArray]);\n      }\n    };\n     // Function to select an image for drawing polygons\n  const selectImage = (imageUrl) => {\n    setCurrentImage(imageUrl);\n    setPolygonPoints([]);\n  };\n\n  // Function to handle polygon drawing\n  const handlePolygonDrawing = (e) => {\n    if (!drawing) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    setPolygonPoints([...polygonPoints, { x, y }]);\n  // Draw the polygon on the canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawImage(currentImage);\n  drawPolygon(ctx, polygonPoints);\n};\n\n// Function to start drawing a polygon\nconst startDrawing = () => {\n  setDrawing(true);\n  setPolygonPoints([]);\n};\n\n// Function to stop drawing a polygon\nconst stopDrawing = () => {\n  setDrawing(false);\n};\n\n// Function to draw an image on the canvas\nconst drawImage = (imageUrl) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageUrl;\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  };\n\n  // Function to draw a polygon on the canvas\n  const drawPolygon = (ctx, points) => {\n    if (points.length < 2) return;\n\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 2;\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n  };\n\n    // Function to handle image upload\n    \n  return (\n    <div >\n    <section className='sectionmain'>\n    <div>\n      <h1 className='head'>Image Upload and Display</h1>\n\n     \n     <label class=\"file-input-container\">\n     <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload}/>\n     <span class=\"file-input-label\">Upload Photo</span>\n </label>\n     \n {images.length > 0 && (\n    <div>\n      <h2>Uploaded Images:</h2>\n      <div className=\"image-list\">\n        {images.map((imageUrl, index) => (\n          <div key={index} className=\"image-container\">\n            <img\n              src={imageUrl}\n              alt={`Uploaded ${index}`}\n              width=\"200\"\n              onClick={() => selectImage(imageUrl)}\n            />\n          </div>\n        ))}\n      </div>\n       {/* Canvas for drawing polygons */}\n       {currentImage && (\n        <div>\n          <h2>Draw a Polygon:</h2>\n          <canvas\n            ref={canvasRef}\n            width={800}\n            height={400}\n            onMouseDown={startDrawing}\n            onMouseMove={handlePolygonDrawing}\n            onMouseUp={stopDrawing}\n          />\n        </div>\n      )}\n    </div>\n  )}\n    </div>\n    </section>\n  </div>\n  \n  )\n}\n\nexport default Room"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}