{"ast":null,"code":"var _jsxFileName = \"/Users/resecsystems/Documents/javasprogs/src/Components/Room.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fabric } from 'fabric';\nimport ColorPicker from './ColorPicker';\nimport \"./Compo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Room = () => {\n  _s();\n  const [canvas, setCanvas] = useState(null);\n  const [selectedColor, setSelectedColor] = useState('#FF0000'); // Initial selected color\n  const [drawingMode, setDrawingMode] = useState(false);\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const canvasRef = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    if (canvas) {\n      canvas.isDrawingMode = drawingMode;\n    }\n  }, [drawingMode, canvas]);\n  const handleCanvasInit = canvas => {\n    setCanvas(canvas);\n  };\n  const startDrawing = () => {\n    setDrawingMode(true);\n  };\n  const stopDrawing = () => {\n    setDrawingMode(false);\n  };\n  const handlePolygonDrawing = e => {\n    if (!drawingMode) return;\n    const canvas = canvasRef.current;\n    const pointer = canvas.getPointer(e.e);\n    setPolygonPoints([...polygonPoints, pointer]);\n  };\n  const drawPolygon = () => {\n    if (!canvas) return;\n    const polygon = new fabric.Polygon(polygonPoints, {\n      fill: selectedColor,\n      // Set the selected color as the fill\n      stroke: 'blue',\n      strokeWidth: 2,\n      selectable: true\n    });\n    canvas.add(polygon);\n    canvas.isDrawingMode = false;\n    setDrawingMode(false);\n    setPolygonPoints([]);\n  };\n  const handleColorChange = color => {\n    setSelectedColor(color);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"sectionmain\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"head\",\n        children: \"Multiple Image Upload and Display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          class: \"file-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            multiple: true,\n            onChange: handleImageUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"file-input-label\",\n            children: \"Choose a File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Uploaded Images:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-list\",\n          children: images.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: imageUrl,\n              alt: `Uploaded ${index}`,\n              width: \"200\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRemoveImage(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"+pf8Lr+RTk/BDBuU/pLrj/QUIKg=\");\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["React","useState","useEffect","fabric","ColorPicker","jsxDEV","_jsxDEV","Room","_s","canvas","setCanvas","selectedColor","setSelectedColor","drawingMode","setDrawingMode","polygonPoints","setPolygonPoints","canvasRef","createRef","isDrawingMode","handleCanvasInit","startDrawing","stopDrawing","handlePolygonDrawing","e","current","pointer","getPointer","drawPolygon","polygon","Polygon","fill","stroke","strokeWidth","selectable","add","handleColorChange","color","children","className","fileName","_jsxFileName","lineNumber","columnNumber","class","type","accept","multiple","onChange","handleImageUpload","images","length","map","imageUrl","index","src","alt","width","onClick","handleRemoveImage","_c","$RefreshReg$"],"sources":["/Users/resecsystems/Documents/javasprogs/src/Components/Room.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fabric } from 'fabric';\nimport ColorPicker from './ColorPicker';\nimport\"./Compo.css\";\n\nconst Room = () => {\n    const [canvas, setCanvas] = useState(null);\n    const [selectedColor, setSelectedColor] = useState('#FF0000'); // Initial selected color\n    const [drawingMode, setDrawingMode] = useState(false);\n    const [polygonPoints, setPolygonPoints] = useState([]);\n    const canvasRef = React.createRef();\n  \n    useEffect(() => {\n      if (canvas) {\n        canvas.isDrawingMode = drawingMode;\n      }\n    }, [drawingMode, canvas]);\n  \n    const handleCanvasInit = (canvas) => {\n      setCanvas(canvas);\n    };\n  \n    const startDrawing = () => {\n      setDrawingMode(true);\n    };\n  \n    const stopDrawing = () => {\n      setDrawingMode(false);\n    };\n  \n    const handlePolygonDrawing = (e) => {\n      if (!drawingMode) return;\n  \n      const canvas = canvasRef.current;\n      const pointer = canvas.getPointer(e.e);\n      setPolygonPoints([...polygonPoints, pointer]);\n    };\n  \n    const drawPolygon = () => {\n      if (!canvas) return;\n  \n      const polygon = new fabric.Polygon(polygonPoints, {\n        fill: selectedColor, // Set the selected color as the fill\n        stroke: 'blue',\n        strokeWidth: 2,\n        selectable: true,\n      });\n  \n      canvas.add(polygon);\n      canvas.isDrawingMode = false;\n      setDrawingMode(false);\n      setPolygonPoints([]);\n    };\n  \n    const handleColorChange = (color) => {\n      setSelectedColor(color);\n    };\n  \n  return (\n    <div >\n    <section className='sectionmain'>\n    <h1 className='head'>Multiple Image Upload and Display</h1>\n\n    {/* Input field for image upload */}\n    {/*<input type=\"file\" accept=\"image/*\" multiple onChange={handleImageUpload} />*/}\n    <div>\n    <label class=\"file-input-container\">\n    <input type=\"file\" accept=\"image/*\" multiple onChange={handleImageUpload} />\n    <span class=\"file-input-label\">Choose a File</span>\n</label>\n</div>\n    {/* Display the uploaded images */}\n    {images.length > 0 && (\n      <div>\n        <h2>Uploaded Images:</h2>\n        <div className=\"image-list\">\n          {images.map((imageUrl, index) => (\n            <div key={index} className=\"image-container\">\n              <img src={imageUrl} alt={`Uploaded ${index}`} width=\"200\" />\n              <button onClick={() => handleRemoveImage(index)}>Remove</button>\n            </div>\n          ))}\n        </div>\n      </div>\n    )}\n    \n    </section>\n  </div>\n  \n  )\n}\n\nexport default Room"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMgB,SAAS,gBAAGjB,KAAK,CAACkB,SAAS,CAAC,CAAC;EAEnChB,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,EAAE;MACVA,MAAM,CAACU,aAAa,GAAGN,WAAW;IACpC;EACF,CAAC,EAAE,CAACA,WAAW,EAAEJ,MAAM,CAAC,CAAC;EAEzB,MAAMW,gBAAgB,GAAIX,MAAM,IAAK;IACnCC,SAAS,CAACD,MAAM,CAAC;EACnB,CAAC;EAED,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzBP,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBR,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMS,oBAAoB,GAAIC,CAAC,IAAK;IAClC,IAAI,CAACX,WAAW,EAAE;IAElB,MAAMJ,MAAM,GAAGQ,SAAS,CAACQ,OAAO;IAChC,MAAMC,OAAO,GAAGjB,MAAM,CAACkB,UAAU,CAACH,CAAC,CAACA,CAAC,CAAC;IACtCR,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAEW,OAAO,CAAC,CAAC;EAC/C,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACnB,MAAM,EAAE;IAEb,MAAMoB,OAAO,GAAG,IAAI1B,MAAM,CAAC2B,OAAO,CAACf,aAAa,EAAE;MAChDgB,IAAI,EAAEpB,aAAa;MAAE;MACrBqB,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,CAAC;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IAEFzB,MAAM,CAAC0B,GAAG,CAACN,OAAO,CAAC;IACnBpB,MAAM,CAACU,aAAa,GAAG,KAAK;IAC5BL,cAAc,CAAC,KAAK,CAAC;IACrBE,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,MAAMoB,iBAAiB,GAAIC,KAAK,IAAK;IACnCzB,gBAAgB,CAACyB,KAAK,CAAC;EACzB,CAAC;EAEH,oBACE/B,OAAA;IAAAgC,QAAA,eACAhC,OAAA;MAASiC,SAAS,EAAC,aAAa;MAAAD,QAAA,gBAChChC,OAAA;QAAIiC,SAAS,EAAC,MAAM;QAAAD,QAAA,EAAC;MAAiC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAI3DrC,OAAA;QAAAgC,QAAA,eACAhC,OAAA;UAAOsC,KAAK,EAAC,sBAAsB;UAAAN,QAAA,gBACnChC,OAAA;YAAOuC,IAAI,EAAC,MAAM;YAACC,MAAM,EAAC,SAAS;YAACC,QAAQ;YAACC,QAAQ,EAAEC;UAAkB;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC5ErC,OAAA;YAAMsC,KAAK,EAAC,kBAAkB;YAAAN,QAAA,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAEDO,MAAM,CAACC,MAAM,GAAG,CAAC,iBAChB7C,OAAA;QAAAgC,QAAA,gBACEhC,OAAA;UAAAgC,QAAA,EAAI;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBrC,OAAA;UAAKiC,SAAS,EAAC,YAAY;UAAAD,QAAA,EACxBY,MAAM,CAACE,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC1BhD,OAAA;YAAiBiC,SAAS,EAAC,iBAAiB;YAAAD,QAAA,gBAC1ChC,OAAA;cAAKiD,GAAG,EAAEF,QAAS;cAACG,GAAG,EAAG,YAAWF,KAAM,EAAE;cAACG,KAAK,EAAC;YAAK;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC5DrC,OAAA;cAAQoD,OAAO,EAAEA,CAAA,KAAMC,iBAAiB,CAACL,KAAK,CAAE;cAAAhB,QAAA,EAAC;YAAM;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA,GAFxDW,KAAK;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGV,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAGR,CAAC;AAAAnC,EAAA,CArFKD,IAAI;AAAAqD,EAAA,GAAJrD,IAAI;AAuFV,eAAeA,IAAI;AAAA,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}