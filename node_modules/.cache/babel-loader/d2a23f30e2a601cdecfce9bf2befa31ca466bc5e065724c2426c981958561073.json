{"ast":null,"code":"var _jsxFileName = \"/Users/resecsystems/Documents/javasprogs/src/Components/Room.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./Compo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Room = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const canvasRef = useRef(null);\n\n  // Function to handle image upload\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Function to handle polygon drawing\n  const handlePolygonDrawing = e => {\n    if (!drawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    setPolygonPoints([...polygonPoints, {\n      x,\n      y\n    }]);\n\n    // Draw the polygon on the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage(image);\n    drawPolygon(ctx, polygonPoints);\n  };\n\n  // Function to start drawing a polygon\n  const startDrawing = () => {\n    setDrawing(true);\n    setPolygonPoints([]);\n  };\n\n  // Function to stop drawing a polygon\n  const stopDrawing = () => {\n    setDrawing(false);\n  };\n\n  // Function to draw an image on the canvas\n  const drawImage = imageUrl => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageUrl;\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  };\n\n  // Function to draw a polygon on the canvas\n  const drawPolygon = (ctx, points) => {\n    if (points.length < 2) return;\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 2;\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n    ctx.closePath();\n    ctx.stroke();\n  };\n\n  // Clear canvas and reset drawing when the image changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      setDrawing(false);\n      setPolygonPoints([]);\n    }\n  }, [image]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"sectionmain\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"head\",\n        children: \"Multiple Image Upload and Display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          class: \"file-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            multiple: true,\n            onChange: handleImageUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"file-input-label\",\n            children: \"Choose a File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Uploaded Images:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-list\",\n          children: images.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: imageUrl,\n              alt: `Uploaded ${index}`,\n              width: \"200\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRemoveImage(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Draw a Polygon:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          width: 400,\n          height: 400,\n          onMouseDown: startDrawing,\n          onMouseMove: handlePolygonDrawing,\n          onMouseUp: stopDrawing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"Ue5RLdyn7z/v/od7ZHw8W46YZZ4=\");\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Room","_s","image","setImage","drawing","setDrawing","polygonPoints","setPolygonPoints","canvasRef","useRef","handleImageUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","handlePolygonDrawing","canvas","current","ctx","getContext","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","clearRect","width","height","drawImage","drawPolygon","startDrawing","stopDrawing","imageUrl","img","Image","src","points","length","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","i","lineTo","closePath","stroke","useEffect","children","className","fileName","_jsxFileName","lineNumber","columnNumber","class","type","accept","multiple","onChange","images","map","index","alt","onClick","handleRemoveImage","ref","onMouseDown","onMouseMove","onMouseUp","_c","$RefreshReg$"],"sources":["/Users/resecsystems/Documents/javasprogs/src/Components/Room.jsx"],"sourcesContent":["import React,{useState} from 'react'\nimport\"./Compo.css\";\n\nconst Room = () => {\n    const [image, setImage] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const canvasRef = useRef(null);\n\n  // Function to handle image upload\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Function to handle polygon drawing\n  const handlePolygonDrawing = (e) => {\n    if (!drawing) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    setPolygonPoints([...polygonPoints, { x, y }]);\n\n    // Draw the polygon on the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImage(image);\n    drawPolygon(ctx, polygonPoints);\n  };\n\n  // Function to start drawing a polygon\n  const startDrawing = () => {\n    setDrawing(true);\n    setPolygonPoints([]);\n  };\n\n  // Function to stop drawing a polygon\n  const stopDrawing = () => {\n    setDrawing(false);\n  };\n\n  // Function to draw an image on the canvas\n  const drawImage = (imageUrl) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageUrl;\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  };\n\n  // Function to draw a polygon on the canvas\n  const drawPolygon = (ctx, points) => {\n    if (points.length < 2) return;\n\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 2;\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n  };\n\n  // Clear canvas and reset drawing when the image changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      setDrawing(false);\n      setPolygonPoints([]);\n    }\n  }, [image]);\n  return (\n    <div >\n    <section className='sectionmain'>\n    <h1 className='head'>Multiple Image Upload and Display</h1>\n\n    {/* Input field for image upload */}\n    {/*<input type=\"file\" accept=\"image/*\" multiple onChange={handleImageUpload} />*/}\n    <div>\n    <label class=\"file-input-container\">\n    <input type=\"file\" accept=\"image/*\" multiple onChange={handleImageUpload} />\n    <span class=\"file-input-label\">Choose a File</span>\n</label>\n</div>\n    {/* Display the uploaded images */}\n    {images.length > 0 && (\n      <div>\n        <h2>Uploaded Images:</h2>\n        <div className=\"image-list\">\n          {images.map((imageUrl, index) => (\n            <div key={index} className=\"image-container\">\n              <img src={imageUrl} alt={`Uploaded ${index}`} width=\"200\" />\n              <button onClick={() => handleRemoveImage(index)}>Remove</button>\n            </div>\n          ))}\n        </div>\n      </div>\n    )}\n    {image && (\n        <div>\n          <h2>Draw a Polygon:</h2>\n          <canvas\n          ref={canvasRef}\n            width={400}\n            height={400}\n            onMouseDown={startDrawing}\n            onMouseMove={handlePolygonDrawing}\n            onMouseUp={stopDrawing}\n          />\n        </div>\n      )}\n    </section>\n  </div>\n  \n  )\n}\n\nexport default Room"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}